---
- name: "Test Apache Tomcat Release In Progress"
  hosts: localhost
  connection: local
  become: true
  vars:
    # variables used by the role for configuration
    - tomcat_version: 9.0.68
    - jws_install_dir: /opt
    - jws_home: "{{ jws_install_dir }}/apache-tomcat-{{ tomcat_version }}"
    - jws_systemd_enabled: True
    # custom variables for use in this playbook
    - tomcat_src_zip_filename: "apache-tomcat-{{ tomcat_version }}-src.zip"
    - tomcat_src_download_url: "https://dist.apache.org/repos/dist/dev/tomcat/tomcat-{{ tomcat_version.split('.')[0] }}/v{{ tomcat_version }}/src/{{ tomcat_src_zip_filename }}"
    - tomcat_bin_download_url: "https://dist.apache.org/repos/dist/dev/tomcat/tomcat-{{ tomcat_version.split('.')[0] }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.zip"
    - tomcat_source_home: "{{ jws_install_dir }}/apache-tomcat-{{ tomcat_version }}-src"
    - run_unit_tests: True
  collections:
    - middleware_automation.jws
  pre_tasks:
    - name: "Download Apache Tomcat sources and run the unit test suite"
      block:
        - name: "Install required dependencies"
          include_tasks: fastpackage.yml
          vars:
            package_name: "{{ item }}"
          loop:
            - zip
            - unzip
            - ant

        - name: "Download source zip from: {{ tomcat_src_download_url }}"
          ansible.builtin.get_url:
            url: "{{ tomcat_src_download_url }}"
            dest: "{{ jws_install_dir }}"
            validate_certs: no

        - name: "Unzip source zip in {{ jws_install_dir }}"
          ansible.builtin.unarchive:
            remote_src: yes
            src: "{{ jws_install_dir }}/{{ tomcat_src_zip_filename }}"
            dest: "{{ jws_install_dir }}"
            creates: "{{ tomcat_source_home }}"

        - name: "Run unit tests"
          ansible.builtin.shell:
            ## exclude tests that depend on openssl version a lot and only check nio
            cmd: "ant -Dexecute.test.apr=false -Dexecute.test.nio2=false -Dtest.exclude=\"**/TestCipher.java,**/TestOpenSSLCipherConfigurationParser.java\" test > build.log 2>&1"
            chdir: "{{ tomcat_source_home }}"
          ignore_errors: True
          register: test_output

        - name: "Output failed tests"
          block:
            - name: "grep FAILED from logs"
              ansible.builtin.shell:
                cmd: "grep -ar FAILED {{ tomcat_source_home }}/output/build/logs | grep -oe TEST-.*\\.txt"
              register: grep_output

            # We can change this to a fail if you want the playbook to stop execution when any tests fail
            - name: "Print grep output"
              ansible.builtin.debug:
                msg: "Check the following logs for failures: {{ grep_output.stdout_lines | join(', ') }}"
          when: test_output.rc != 0
      when: run_unit_tests

    # Since the binary doesn't exist on the CDN yet, we must manually download from the staging area
    - name: "Download binary zip from: {{ tomcat_bin_download_url }}"
      ansible.builtin.get_url:
        url: "{{ tomcat_bin_download_url }}"
        dest: "{{ jws_install_dir }}"
        validate_certs: no
  tasks:
    - name: "Include role to unzip and configure Apache Tomcat"
      ansible.builtin.include_role:
        name: jws

    - name: "Run the validation checks"
      ansible.builtin.include_role:
        name: jws_validation

    - name: "Deploy test application and make some requests"
      block:
      - name: "Deploy test webapp"
        ansible.builtin.copy:
          src: "testapp"
          dest: "{{ jws_home }}/webapps/"
          mode: 0644

      # This will cause systemd to start Tomcat
      - name: "Force all notified handlers to run at this point, not waiting for normal sync points"
        ansible.builtin.meta: flush_handlers

      - name: "Wait for Tomcat HTTP port to be available"
        ansible.builtin.wait_for:
          port: 8080

      - name: "Verify webapp is responding as expected"
        ansible.builtin.uri:
          url: "http://localhost:8080/testapp/"
          return_content: yes
        register: this
        failed_when: "'Hello!' not in this.content"
        until: this.status == 200
        retries: 3
        delay: 5
